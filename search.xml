<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[kueiWallet为什么选择React-Native]]></title>
    <url>%2F2018%2F08%2F06%2FecoinWallet%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9React-Native%2F</url>
    <content type="text"><![CDATA[kueiWallet为什么使用React-Native开发这不是一篇严肃的技术讨论,只说明了我们团队为何选择React-Native.目前市场上Native的开发已经非常成熟,开发一款类似kueiWallet的应用并不复杂.但是会写Native并且懂得区块链知识的开发人员稀缺.我们将围绕APP开发和区块链开发两部分来论述. APP开发React-Native的优缺点: 优点: React-Native使用js发开, 门槛低 React-Native调试非常快速(增量编译), 开发体验更好 对发布的应用支持code-push热更新(苹果/谷歌都支持code-push,具体规则看官方说明) React-Native跨平台(一份代码同时在android/ios上运行), 代码复用方便 React-Native的UI是native的(js代码会通过JsBridge转成native的代码), 界面流畅度和原生一致 缺点: React-Native当前仍然是beta版, 学习曲线陡峭 一些增强功能,定制功能需要native开发人员特别编写React-Native扩展供js调用 在一个APP中同时存在native和React-Native是及其艰巨的任务(可以看看Airbnb的React Native at Airbnb) native开发人员通常不认同js语言, 让他们重新学习React-Native不容易 React-Native由facebook掌控,虽然目前也是广泛使用,仍有烂尾的风险 区块链开发使用React-Native开发ethereum library在区块链领域, NodeJS的生态非常完善, 比特币有bitpay, 以太有web3. 而React-Native是运行在JavascriptCore上, 一部分NodeJS项目代码近乎可以直接运行. 同时也因为JavascriptCore缺少Node扩展如:Buffer/Crypto等, 需要使用native编写的第三方代码来扩展React-Native.好在这部分代码在社区都有实现. 使用native开发ethereum librarynative开发区块链library,需要同时在android/ios上保持两条分支独自开发(需要的人手比React-Native多了不少);同时native开发区块链能借鉴的项目目前并不多,要实现诸如abi encode/decode, RLP encode/decode, offline sign transaction并保证代码质量绝非易事. kueiWallet的选择kueiWallet团队成员有丰富的Golang开发经验, 对ethereum/go-ethereum较熟悉.同时,团队在NodeJS上也有较多经验, 移植NodeJS代码到React-Native也还算顺利.最关键的是,团队成员不多,我们觉得对于一个从0到1的过程, 还是更应该追求开发效率.今后React-Native不能满足我们的业务需求,可使用native重写.]]></content>
      <tags>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[fomo3d-上线部署要点]]></title>
    <url>%2F2018%2F07%2F28%2Ffomo-deploy%2F</url>
    <content type="text"><![CDATA[fomo3d-上线部署要点fomo3d游戏一出，国内疯狂clone上线，这里谈下我上线的方法（纯手动的^_^，落伍了） 通过原版合约地址，可以一层一层的拔下所有涉及到的合约代码。 目前据我统计共有8个合约，其中有两个闭源合约： F3DexternalSettingsInterface JIincInterfaceForForwarder 闭源合约不可怕，看明白什么功能，自己hack掉是不影响游戏本身的。 提前预警，合约的内容细节还是要自己研究的，没时间写太细， 我个人猜测，目前能看到只是TeamJust规划的一小部分。 其实这个游戏本身只需要2个合约就可以跑起来，且没实质影响，只是单纯改变了部分利益分配方式。 下面说明，我尽可能少改动原版的情况下，部署上线合约，修改后的原版合约代码在这里 部署前的准备我一般使用在线remix工具部署合约在自己的私链上调试，私链建议如下启动（一键解万忧的方式，推荐创世块采用POA共识-不消耗CPU），这样可以使用remix的debug功能 12345678910111213141516171819202122/home/xxp/Software/bin/geth \ --datadir ./node0\ --ws\ --wsaddr 0.0.0.0\ --wsapi &quot;eth,net,web3,admin,personal,txpool,miner,clique,debug&quot;\ --wsport 8546\ --wsorigins &quot;*&quot;\ --rpc\ --rpcapi &quot;eth,net,web3,admin,personal,txpool,miner,clique,debug&quot;\ --rpccorsdomain &quot;*&quot;\ --rpcaddr 0.0.0.0\ --rpcport 8545\ --rpcvhosts &quot;*&quot;\ --mine\ --etherbase 0xdbeb69c655b666b3e17b8061df7ea4cc2399df11\ --unlock 0xdbeb69c655b666b3e17b8061df7ea4cc2399df11\ --password ./password\ --nodiscover\ --maxpeers &apos;50&apos;\ --networkid 378\ --targetgaslimit 471238800\ &amp; 部署合约按先后顺序如下部署 p3d合约 真心不推荐部署带有p3d合约的游戏，这样项目方就可以吃掉本来要流到这里25%左右的流水资金了 我对p3d的合约内容还没有很深的研究，只知道它 是一个自带“交易所”、发行总量为0的Token， 通过Eth买入会自动增发，卖出会销毁 买入和卖出都会扣掉10%的费用给仍持有Token的人 每买一次都会使Token升值 每卖一次会使Token降价 这个合约不需要改动，贴源码，编译后部署截图如下，点击红色记录下来部署后的合约地址 部署divies合约 这个合约专门往p3d持有者发分红的。 把刚才记录的p3d合约地址，替换到HourglassInterface后面的地址。如上贴源码，编译后部署Divies合约， 记录下divies的地址，并替换fomo3dlong.sol里的DiviesInterface地址 部署JIincForwarder合约 这个合约是管理流向社区2%的资金的，被fomo3dlong里调用，这里需要hack，因为其中涉及到一个闭源的合约，既然知道它是管理2%资金流向的，那直接在fomo3dLong的合约如下hack 把定义Jekyll_Island_Inc的地方，直接定义成一个普通地址 address reward = 0xxxxxxx; 把调用Jekyll_Island_Inc的地方， 写成reward.transfer(_com);， 注意有两个地方调用（都要换），一个是游戏进行时调用，一个是本轮结束后调用 1234567891011121314// // community rewards// if (!address(Jekyll_Island_Inc).call.value(_com)(bytes4(keccak256("deposit()"))))// &#123;// // This ensures Team Just cannot influence the outcome of FoMo3D with// // bank migrations by breaking outgoing transactions.// // Something we would never do. But that's not the point.// // We spent 2000$ in eth re-deploying just to patch this, we hold the // // highest belief that everything we create should be trustless.// // Team JUST, The name you shouldn't have to trust.// _p3d = _p3d.add(_com);// _com = 0;// &#125;reward.transfer(_com); 所以不需要部署这个合约，你只要想办法把流到这里的ETH，流到平台方就可以了。（流到开发者，我觉得也是可以的，哈哈～） 部署Team合约 这个合约利用多签技术限制了影响团队的操作，需要改的地方就是把这些地址全部换成自己的， 值得注意的是deployer地址，改成部署合约的地址，后面调用playbook合约时需要这里的权限 1234567891011address inventor = 0x18E90Fc6F70344f53EBd4f6070bf6Aa23e2D748C;address mantso = 0x8b4DA1827932D71759687f925D17F81Fc94e3A9D;address justo = 0x8e0d985f3Ec1857BEc39B76aAabDEa6B31B67d53;address sumpunk = 0x7ac74Fcc1a71b106F12c55ee8F802C9F672Ce40C;address deployer = 0xF39e044e1AB204460e06E87c6dca2c6319fC69E3;admins_[inventor] = Admin(true, true, "inventor");admins_[mantso] = Admin(true, true, "mantso");admins_[justo] = Admin(true, true, "justo");admins_[sumpunk] = Admin(true, true, "sumpunk");admins_[deployer] = Admin(true, true, "deployer"); 改完后，如上贴源码，编译后部署TeamJust合约，记录地址，替换playbook合约的TeamJustInterface地址 部署playerBook合约 很有意思的合约，这里就是上面说的整个游戏其实只需要两个合约中的一个。不解读细节了，直接改吧 你会发现这里怎么还有个JIincForwarderInterface地址，第三步不是说不部署这个了么 ？ 这里的主要是收取别人注册名字开启邀请返佣机制时需要支付的那0.01ETH的 知道了这个，就跟第3步一样加个收款地址吧，细节不标 如上贴源码，编译后部署PlayBook合约，记录下地址， 替换fomo3d合约里的PlayerBookInterface地址。 部署fomo3dLong合约 这个是另一个核心合约之一，这里也有个闭源合约，用来初始化控制时间的参数 直接注释掉，然后如下改动 12uint256 private rndExtra_ = 30; // 和rndInit一起控制第一轮游戏开始的初始时间的，单位是秒uint256 private rndGap_ = 30; // 和rndInit一起控制下轮游戏开始的初始时间的，单位是秒 还有两个改动点就是activate和setOtherFomo里加上自己的deployer地址， 额外把setOtherFomo里的往另一个游戏池子里输血的功能改到，因为我们没有其他的游戏，如第三步一样，换个收款码吧 1otherF3D_.transfer(_long); 部署吧！！！ 最后部署这一步，很有可能遇到errored: oversized data的错误，刷新remix页面即可。 合约设置先setOtherFomo,然后再设置playbook里的addgame，最后activate即可。 页面页面直接Ctrl+s下载原版界面，把最后的fomo3dLong的合约地址替换下，另外那个后台API，其实没什么，自己试下就知道了，然后就可以上线了。。。 感受 合约debug难如上青天 目前我们搞出来的定制版有： 多级返佣模式， 可自定义级数 空投fix版 去除战队版 移除p3d版本 原版]]></content>
      <categories>
        <category>fomo3d</category>
      </categories>
      <tags>
        <tag>fomo3d</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[fomo3d-ETH进入后都去哪儿了]]></title>
    <url>%2F2018%2F07%2F26%2Ffomo-eth%2F</url>
    <content type="text"><![CDATA[fomo3d中的ETHfomo3d里有战队系统、邀请分佣机制、持key分红、空投系统、持p3d分红等玩法, 相信通过之前各类媒体的解读都有所了解。 下面通过分析合约代码，以讲解ETH数据流向的方式串下所有流程，让大家明明白白的知道自己的ETH都去了哪里。 以10ETH充币到fomod3d合约举例，分三种情况 早期用户（游戏刚启动时的激进者） 中期用户（为了赚分红、返佣的用户） 晚期用户（为了赢48%大奖的人） 早期当合约被激活后，开发者做了一个很“仇富”的举动，每个地址在合约收到100ETH之前，只能购买1ETH的keys，防止被资本大鳄收割本轮后面入场的玩家。这里有个小hack的点，就是提前多准备些小号，多个地址去投，也可以做到比别人便宜多的价格买到keys。 这个阶段以买入10ETH举例，你只会买到等同于1ETH价值的keys，其余9个ETH会直接进入你的收益里，演示如下： 下面是实现此功能的代码 代码里的规则(不限阶段)梳理： 提款功能可以无限次提，不影响本轮接下来的分红收益，你的收益来自于你持有keys的分红。 最低可以支付1e-09个Ether，当购买的Key数量大于或者等于1个时，倒计时会加30秒。 当支付的eth不小于0.1时，会送一次“彩票”，买key支付的金额越大，中奖的奖金也越大，最大可中“彩票池”里额度的75%，直译过来这个功能叫空投。 中期所有阶段的用户如果是直接打开的官网，充币买keys时会触发合约的这个接口， 其中_affcode是值邀请人的地址，_team是指用户所有购买key所选的战队，默认的2是指蛇队。 如果是从别人的邀请进入的官网，要看邀请人给你发的是哪个链接，有三种形式的链接： 从上到下，分别会走buyXaddr、buyXid、buyXname的接口，比如我给人发了exitscam.me/xxp的邀请链接，被邀的人买keys时会触发如下接口： 这其中我个人会收到他买key总额度的10%佣金，这里还有个隐藏的点： 如果用户是直接从官网进入买key的，那同样会有10%佣金的产生，只不过是流向p3d的持有者。 晚期当有人买key时，都会选择一个战队，默认会被勾选蛇队的，当买到keys数量不小于1个时，会使所选战队成为本轮的潜在获胜队。 说了这么多废话，回归正体，你的10ETH到底去了哪里？？？ 如果支付10ETH时，选的是蛇队，你10个ETH里的5.6个会被持keys的人均分，1个看情况是给p3d的人还是给邀请你的人，还有1个必定会分给持有p3d的人，另外2个会进入大池子，其中0.2个会分给社区贡献人，0.1个会给TeamJust的另一个游戏合约，还有0.1个会流到“彩票池”里。 这里面根据你选的战队不通，分配比例不一样，具体看下的代码，执行这些ETH分配的是走distributeExternal，distributeInternal 出去的。 后面的PotSpit是本轮游戏结束后，如何分配大池子里的金额。 1234567891011121314151617181920// Team allocation structures// 0 = whales// 1 = bears// 2 = sneks// 3 = bulls// Team allocation percentages// (F3D, P3D) + (Pot , Referrals, Community)// Referrals / Community rewards are mathematically designed to come from the winner's share of the pot.fees_[0] = F3Ddatasets.TeamFee(30,6); //50% to pot, 10% to aff, 2% to com, 1% to pot swap, 1% to air drop potfees_[1] = F3Ddatasets.TeamFee(43,0); //43% to pot, 10% to aff, 2% to com, 1% to pot swap, 1% to air drop potfees_[2] = F3Ddatasets.TeamFee(56,10); //20% to pot, 10% to aff, 2% to com, 1% to pot swap, 1% to air drop potfees_[3] = F3Ddatasets.TeamFee(43,8); //35% to pot, 10% to aff, 2% to com, 1% to pot swap, 1% to air drop pot// how to split up the final pot based on which team was picked// (F3D, P3D)potSplit_[0] = F3Ddatasets.PotSplit(15,10); //48% to winner, 25% to next round, 2% to compotSplit_[1] = F3Ddatasets.PotSplit(25,0); //48% to winner, 25% to next round, 2% to compotSplit_[2] = F3Ddatasets.PotSplit(20,20); //48% to winner, 10% to next round, 2% to compotSplit_[3] = F3Ddatasets.PotSplit(30,10); //48% to winner, 10% to next round, 2% to com 还有很多细节要分享，碍于时间有限，不过我会持续更新这里的 感想 持有p3d的人和早期进入的才是最大的受益者 后期进入的人只有通过拉人赚佣金的方式回本了 这轮游戏应该是结束不了的： 总有人赔了，要拉人进来捞本，被拉的人周而复始。。。 结束只有两个可能： 1. 合约有重大漏洞，资金被盗 2. 当大池子里48%的收益足以对整个以太网络发动51%攻击。。。 矿工在背后偷着乐 你们谁知道TeamJust的下个游戏的合约地址么？ 我知道！！！ 如果你也找到了，可以加我微信yiyemeishui， 加好友时请输入TeamJust的下个游戏合约地址，我们一起来票大的。。。]]></content>
      <categories>
        <category>fomo3d</category>
      </categories>
      <tags>
        <tag>fomo3d</tag>
      </tags>
  </entry>
</search>
